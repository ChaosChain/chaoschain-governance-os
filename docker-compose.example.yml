services:
  # Core services
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - db
      - sgx-mock
    environment:
      - CHAOSCORE_ENV=staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chaoscore
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/chaoscore
      - SGX_ENCLAVE_URL=http://sgx-mock:7000
      - ETHEREUM_PROVIDER_URL=YOUR_ETHEREUM_PROVIDER_URL
      - ETHEREUM_CONTRACT_ADDRESS=YOUR_CONTRACT_ADDRESS
      - ETHEREUM_PRIVATE_KEY=YOUR_PRIVATE_KEY
      - ETHEREUM_MOCK=false
      - CHAOS_ENDPOINT_ABI=/app/ChaosEndpoint.abi.json
      - METRICS_ENABLED=true
      - JWT_SECRET=YOUR_JWT_SECRET
      - JWT_EXPIRATION_MINUTES=60
      - DEBUG=true
    volumes:
      - ./:/app
      - ./deployments/sepolia/ChaosEndpoint.abi.json:/app/ChaosEndpoint.abi.json:ro
      - ./deployments/sepolia/ChaosEndpoint.json:/app/deployments/sepolia/ChaosEndpoint.json:ro
      - ./deployments/sepolia/ChaosEndpoint.abi.json:/app/deployments/sepolia/ChaosEndpoint.abi.json:ro
    networks:
      - chaoscore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  # Persistence
  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=chaoscore
    volumes:
      - postgres-data-sepolia:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chaoscore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Secure Execution Mock for staging
  sgx-mock:
    build:
      context: ./tools/sgx-mock
      dockerfile: Dockerfile
    ports:
      - "7001:7000"
    environment:
      - SGX_SIMULATION=true
    volumes:
      - ./tools/sgx-mock:/app
    networks:
      - chaoscore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - chaoscore-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
      - ./deployments/grafana/dashboard.json:/var/lib/grafana/dashboards/chaoscore.json
    depends_on:
      - prometheus
    networks:
      - chaoscore-network
    restart: unless-stopped

volumes:
  postgres-data-sepolia:

networks:
  chaoscore-network:
    driver: bridge 