name: CI

on:
  push:
    branches: [ main, hotfix/*, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -e .
      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Check formatting with black
        run: black --check .
      - name: Check imports with isort
        run: isort --check .

  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_DB: chaoscore
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .
      - name: Initialize database
        run: |
          PGPASSWORD=chaoscore_pass psql -h localhost -U chaoscore -d chaoscore -f db/init.sql
      - name: Run unit tests
        run: |
          pytest tests/unit --cov=chaoscore/core --cov-report=xml
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: chaoscore
          SGX_MOCK: 'true'
          ETHEREUM_MOCK: 'true'
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_DB: chaoscore
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .
      - name: Initialize database
        run: |
          PGPASSWORD=chaoscore_pass psql -h localhost -U chaoscore -d chaoscore -f db/init.sql
      - name: Run integration tests
        run: |
          pytest tests/integration --cov=chaoscore/core --cov-report=xml
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: chaoscore
          SGX_MOCK: 'true'
          ETHEREUM_MOCK: 'true'
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  ethereum-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: ethereum/package-lock.json
      - name: Install dependencies
        run: |
          cd ethereum
          npm install
      - name: Run tests
        run: |
          cd ethereum
          npx hardhat test

  governance-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_DB: chaoscore
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      - name: Initialize database
        run: |
          PGPASSWORD=chaoscore_pass psql -h localhost -U chaoscore -d chaoscore -f db/init.sql
      - name: Run governance tests
        run: |
          python tests/test_governance_flow.py
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: chaoscore
          SGX_MOCK: 'true'
          ETHEREUM_MOCK: 'true'
      - name: Run end-to-end demo (local mode)
        run: |
          python demo_governance_flow.py --verbose
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: chaoscore
          SGX_MOCK: 'true'
          ETHEREUM_MOCK: 'true'
      - name: Run end-to-end demo (staging mode with mocks)
        run: |
          python demo_governance_flow.py --stage --verbose
        env:
          POSTGRES_USER: chaoscore
          POSTGRES_PASSWORD: chaoscore_pass
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: chaoscore
          SGX_MOCK: 'true'
          ETHEREUM_MOCK: 'true'

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t chaoscore:test .
      - name: Test Docker image
        run: |
          docker run --rm chaoscore:test python -c "import chaoscore; print('ChaosCore version:', chaoscore.__version__)" 